#summary upcoming release 0.3.0 notes

=Google Chrome Developer Tools for Java. Upcoming Release 0.3.0.=

This release succeeds the [Release_0_2_2 release 0.2.2].

==Overview==
This release main themes are support of emerging [WIP WebKit Remote Debugging Protocol] in Chrome and simplified 'auto-detect' source look-up implementation. SDK interfaces have been changed moderately but incompatibly, so the minor version number was bumped up. A new feature called "ChromeDevTools SDK WIP Backends" is added and is recommended for install.

==Debugger==
===Auto-Detect Source Look-Up Mode===
Several releases ago Debugger began to support source look-up -- working with user files from workspace rather than temporary auto-create files under a VirtualProject. However set-up procedure was pretty much involved. It was a price for the accurateness of 2-way source matching.

This release introduces a new, much more user-friendly look-up mode called 'Auto-detect' (the old one is now called 'Exact match'). It employes more fuzzy algorithms and deals only with short file names.
You can enable it in the Debug Configurations dialog:

1. in 'Remote' tab choose 'Auto-detect' mode:
<pic>
2. in Source tab add one or more folders that holds your working files.

If all of your files in the project are called 'foo.js', this probably won't work correctly. However for the most of projects there shouldn't be any problems.

Should you have 2 files with the same name in the different directories, there is a fall-back: you can configure Debugger to take a directory name into consideration for this file.

1. Open file properties (Ctrl+Enter).
<pic>
2. Use 'less' and 'more' buttons to add or remove remove file path components. All selected file path components will be used for matching this file. 

===Experimental !WebKit Remote Debugging Protocol (WIP)=== 
This release adds an [WIP experimental support] for a new debug protocol used in Google Chrome/Chromium. This protocol should eventually supersede currently used [ChromeDevToolsProtocol 'DevTools' protocol]. The subproject got a local codename [WIP].

From the user point of view switching to the new protocol shouldn't be visible. The most obvious change is that ref-id in Variables/Expressions views: the have a different format and are completely random, so that the same object may appear with the different ids in the same view. 

To try the new protocol you should make sure that you installed feature "ChromeDevTools SDK WIP Backends". That should reveal how WIP support is currently deployed. There are several (incompatible) versions of protocol supported and you can choose between them: the older protocol version corresponds to the current stable release of Chrome (13), but it misses some features; the newer protocol version comes with a development yet-not-stable builds. The separate feature "ChromeDevTools SDK WIP Backends" installs the current collection of backends and updating this feature should install newer WIP backends in the future as the protocol evolves.

As of 0.3.0 you need to set the correct backend manually. See the [#WIP_Backends table] below.

1. Create a debug configuration of "WebKit Protocol" type.
2. In 'Remote' tab select the proper backend version.

===Exceptions===
Debugger started to better support exceptions. If you stopped on exception (see {{{Break on JavaScript Exceptions}}} in LaunchElement) or got an exception as a result of expression evaluate, now you have the access to the exception value: you can expand its properties or pin-point an object or do whatever is available from Variables view.

===Object In with Statement===
 Similarly to exceptions if you paused inside {{{with}}} statement, you can see its argument in Variables view and get a full access to it. Note that JavaScript VM may be not fully accurate and give you wrapper-object instead of original primitive value used in {{{with}}} statement.

===Separate Folders For Unnamed Scripts===
All scripts that are currently loaded in VM are shown under a VirtualProject. To keep things more clear, scripts without a name (e.g. eval'd) are put in a separate folder.

===JSDT Integration Feature Notes===
"Chromium JavaScript Debugger Bridge to JSDT" feature became less important. It used to bind JSDT native breakpoints. However Eclipse allows to create any type of breakpoints in any editor (see {{{Run | Breakpoint Types}}}), so this code was dropped. However the feature is still useful if you want to use JSDT formatted in {{{V8 Debugging | Temporarily Format Source}}} action.

==SDK==
==WIP Backends==

The list of available WIP backend versions. They get installed within a feature "ChromeDevTools SDK WIP Backends".
|| id || Chrome version || Debugger limitations || SDK limitations ||
|| WK@87771 || 13.0.782.112 (stable) || Auto-detect mode is missing,<br>live edit preview is missing. || '!RegExp' breakpoint targets unsupported,<br>live edit preview is missing. ||
|| WK@91698 || 14.0.835.`*` (beta) || || ||
|| WK@93101 || 15.0.855.`*`<br>dev build#97053 || || ||