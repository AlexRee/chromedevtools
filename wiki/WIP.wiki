#summary WIP term explained

= Introduction =
WIP is a codename [#WebKit_Remote_Debugging_Protocol WebKit Remote Debugging Protocol] Java implementation. This is the main Google Chrome/Chromium debug protocol and historically it succeeds ChromeDevToolsProtocol. It is natively used by in-browser Developer Tools.

WIP stands for "!WebInspector Protocol" and is used within "Google Chrome Developer Tools for Java" project only, mostly for historical reasons.

The development process earned a dedicated [WipBackendDevelopment article].

=== How to start Google Chrome/Chromium ===
{{{
chrome --remote-debugging-port=<port>
}}}

=== How to attach from [EclipseDebugger Debugger] ===
A launch configuration named "!WebKit Protocol" should be created (see [DebuggerTutorial#Connect tutorial]).

=== How to attach from SDK ===
Use the following create method:
{{{
org.chromium.sdk.wip.WipBrowserFactory.INSTANCE.createBrowser(...)
}}}

== WIP Backends ==
Note that the project contains several alternative protocol implementations for the different versions. They are deployed as "WIP Backends" (see [WipBackends main article]).

=== Protocol Name ===
Protocol is called '!WebKit Remote Debuggin Protocol'. You can be sure that you are using this protocol, if you are starting Google Chrome/Chromium with the following parameter:
{{{--remote-debugging-port=<port>}}}

Compare with [ChromeDevToolsProtocol#Protocol_Name ChromeDevTools Protocol].

== !WebKit Remote Debugging Protocol ==
See [http://code.google.com/chrome/devtools/docs/remote-debugging.html].
Blog posts:
  * [http://blog.chromium.org/2011/05/remote-debugging-with-chrome-developer.html Remote debugging with Chrome Developer Tools], The Chromium Blog, May 9th, 2011,
  * [http://www.webkit.org/blog/1620/webkit-remote-debugging/ WebKit Remote Debugging], Surfin' Safari, May 9th, 2011.