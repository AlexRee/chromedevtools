#summary Features of Eclipse Debugger.


<wiki:toc max_depth="2" />

==Breakpoints==
TBD
===Provisional Breakpoints===
breakpoint can be set before script is loaded or before debugger is connected

TBD
===Selecting Breakpoint Type===
The Eclipse IDE can host several different debuggers. Such configurations often cause ambiguity when setting a breakpoint: which debugger should own the new breakpoint? Eclipse provides a UI for this case and it is now supported by !ChromeDevTools. You may explicitly choose a type of breakpoint you are about to set in the menu {{{Run->Breakpoint Types}}} (choose "Chrome/V8 breakpoints" in a submenu.)

==Watches==
TBD
==Step in/over/out==
TBD
==Stack context when suspended==
TBD
==Mouse on-hover identifier evaluation==
TBD
==Text selection evaluation==
TBD
==Script sources in workspace files and downloaded from server==
TBD
==Exception events reported into the Error Log==
TBD
==Script live editing (experimental)==
TBD

==!ToString==
In some cases exploring variables can get much easier with their values represented as strings. A single glance at {{{“[1, 2, 3, 4, 5, 6, 7, 8]”}}} seems to be a much faster way to learn that the value is an array holding 8 numbers than expanding a tree node in the UI to see its children.

http://chromedevtools.googlecode.com/svn/wiki/EclipseDebuggerFeatures-tostring.png

For all primitive values, !JavaScript pre-defines their string representations. You can define a string representation for your objects by implementing the “toString()” method on their prototypes, much like in Java (see the picture above).


==Pin-Point Value==
Sometimes it is important to grip a particular object and keep it for several debugger steps. For example, you may watch the {{{getManager()}}} expression, but do you know for sure if it returns the same object every time, or the objects returned are all different? Select a value in the Variables or Expressions view and _pin-point_ it, which means *save it as a property of the global object*. You can do this from the context menu: “Pin-Point Value...”:

http://chromedevtools.googlecode.com/svn/wiki/EclipseDebuggerFeatures-pinpoint-dialog.png

This will save your value in the global object, and you can access it at any time as {{{my_debug_save.manager1}}} (a dialog window also lets you add similar watch expressions.)
Some time later you can see how this object has changed its data or compare it with what {{{getManager()}}} returns now: {{{my_debug_save.manager1 === getManager()}}}.