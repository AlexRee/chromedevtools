#summary upcoming release 0.2.2 notes

=Google Chrome Developer Tools for Java. Release 0.2.2.=

This release succeeds the [Release_0_2_0 release 0.2.0].

==Overview==
This release introduces several new Debugger features. The SDK changes back these features up accordingly.

==String Representation==
In some cases exploring variables might get much easier with string representation of values on display. E.g. viewing {{{“[1, 2, 3, 4, 5, 6, 7, 8]”}}} might be a much faster way to learn that the value is array of 8 numbers than expanding tree node in UI and looking at its children. Starting from this release the string representation is visible in Debugger.

http://chromedevtools.googlecode.com/svn/wiki/rel022-string-representation.png

For all primitive values !JavaScript pre-defines their string representation. For objects it is defined by programmer (see the picture above) and usually it is used for debugging purposes. Programmer only has to add “toString” object method (much like in Java). Method “toString” is also good for debug print.

==Host/Port==
It was actually one of the oldest requests – to allow connections to any remote host instead of compulsory {{{localhost}}}. Note that in practice this doesn't make a lot of changes, because both Chrome and V8 will deny non-local connections (for security reasons). Anyway this is now made possible on Debugger side:

http://chromedevtools.googlecode.com/svn/wiki/rel022-host-port.png

Note that a realistic use-case would be to set up a small proxy on remote host, next to debuggee, and establish connection to this proxy, so that Chrome/V8 would be accessed from a local process. Some versions of Unix utility netcat could be used to set up single-connection proxy as easy as:
{{{
nc -l <proxy_port> -c “nc localhost <port>”
}}}

==Pin-Point Value==
Sometimes it is important to grip a particular object and keep it for several debugger steps. E.g. you may have a watch expression "getManager()" but do you know, whether it returns the same object all the time or the objects are different? Now you can select a value in Variables or Expressions view and _pin-point_ it, which means *save it as a property of the global object*. You can do this from context menu: “Pin-Point Value...”:

http://chromedevtools.googlecode.com/svn/wiki/rel022-pinpoint-dialog.png

This would save your value in a global object and you can access it at any time as “my_debug_save.manager1” (dialog window also offers adding such watch expression for you).
Some time later you can look how this object has changed its data or compare it with what “getManager()” returns now: {{{“my_debug_save.manager1 === getManager()”}}}.

==Breakpoint Types==
Eclipse IDE may host several different debuggers. Such configurations often cause ambiguity when setting a breakpoint: which debugger should own a new breakpoint? Eclipse provides a UI for this case and it is now supported by !ChromeDevTools. You may explicitly choose a type of breakpoint you are about to set in the menu Run->Breakpoint Types; choose "Chrome/V8 breakpoints" in submenu.


==System Requirements==
|| *Eclipse configuration:*  ||Eclipse Platform or any richer configuration (e.g. Eclipse Java IDE). ||
|| *Eclipse version:* ||  Eclipse 3.4 minimum, Eclipse 3.5 and Eclipse 3.6 are tested. ||
|| *Java:* || J2SE-1.6 or newer. ||

Optional:
|| *JSDT version:* ||  1.0 or newer. ||